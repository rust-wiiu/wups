/* automatically generated by rust-bindgen 0.70.1 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
unsafe impl Sync for wups_loader_hook_t {}

#[allow(unsafe_code)]
pub const WUPS_VERSION_STR: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"0.8.1\0") };
pub const WUPS_API_ITEM_OPTION_VERSION_V1: u32 = 1;
pub const WUPS_API_ITEM_OPTION_VERSION_V2: u32 = 2;
pub const WUPS_API_CATEGORY_OPTION_VERSION_V1: u32 = 1;
pub const WUPS_API_CONFIG_API_OPTION_VERSION_V1: u32 = 1;
pub const WUPS_CONFIG_API_VERSION_ERROR: u32 = 4294967295;
pub const WUPS_STORAGE_CUR_API_VERSION: u32 = 2;
pub mod wups_loader_hook_type_t {
    pub type Type = ::core::ffi::c_uint;
    pub const WUPS_LOADER_HOOK_INIT_WUT_MALLOC: Type = 0;
    pub const WUPS_LOADER_HOOK_FINI_WUT_MALLOC: Type = 1;
    pub const WUPS_LOADER_HOOK_INIT_WUT_NEWLIB: Type = 2;
    pub const WUPS_LOADER_HOOK_FINI_WUT_NEWLIB: Type = 3;
    pub const WUPS_LOADER_HOOK_INIT_WUT_STDCPP: Type = 4;
    pub const WUPS_LOADER_HOOK_FINI_WUT_STDCPP: Type = 5;
    pub const WUPS_LOADER_HOOK_INIT_WUT_DEVOPTAB: Type = 6;
    pub const WUPS_LOADER_HOOK_FINI_WUT_DEVOPTAB: Type = 7;
    pub const WUPS_LOADER_HOOK_INIT_WUT_SOCKETS: Type = 8;
    pub const WUPS_LOADER_HOOK_FINI_WUT_SOCKETS: Type = 9;
    pub const WUPS_LOADER_HOOK_INIT_WRAPPER: Type = 10;
    pub const WUPS_LOADER_HOOK_FINI_WRAPPER: Type = 11;
    pub const WUPS_LOADER_HOOK_GET_CONFIG_DEPRECATED: Type = 12;
    pub const WUPS_LOADER_HOOK_CONFIG_CLOSED_DEPRECATED: Type = 13;
    pub const WUPS_LOADER_HOOK_INIT_STORAGE_DEPRECATED: Type = 14;
    pub const WUPS_LOADER_HOOK_INIT_PLUGIN: Type = 15;
    pub const WUPS_LOADER_HOOK_DEINIT_PLUGIN: Type = 16;
    pub const WUPS_LOADER_HOOK_APPLICATION_STARTS: Type = 17;
    pub const WUPS_LOADER_HOOK_RELEASE_FOREGROUND: Type = 18;
    pub const WUPS_LOADER_HOOK_ACQUIRED_FOREGROUND: Type = 19;
    pub const WUPS_LOADER_HOOK_APPLICATION_REQUESTS_EXIT: Type = 20;
    pub const WUPS_LOADER_HOOK_APPLICATION_ENDS: Type = 21;
    pub const WUPS_LOADER_HOOK_INIT_STORAGE: Type = 22;
    pub const WUPS_LOADER_HOOK_INIT_CONFIG: Type = 23;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wups_loader_hook_t {
    pub type_: wups_loader_hook_type_t::Type,
    pub target: *const ::core::ffi::c_void,
}
impl Default for wups_loader_hook_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type BOOL = i32;
pub mod KPADError {
    pub type Type = ::core::ffi::c_int;
    pub const KPAD_ERROR_OK: Type = 0;
    pub const KPAD_ERROR_NO_SAMPLES: Type = -1;
    pub const KPAD_ERROR_INVALID_CONTROLLER: Type = -2;
    pub const KPAD_ERROR_WPAD_UNINIT: Type = -3;
    pub const KPAD_ERROR_BUSY: Type = -4;
    pub const KPAD_ERROR_UNINITIALIZED: Type = -5;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct KPADVec2D {
    pub x: f32,
    pub y: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct KPADVec3D {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct KPADStatus {
    pub hold: u32,
    pub trigger: u32,
    pub release: u32,
    pub acc: KPADVec3D,
    pub accMagnitude: f32,
    pub accVariation: f32,
    pub pos: KPADVec2D,
    pub __unk5: [::core::ffi::c_char; 12usize],
    pub angle: KPADVec2D,
    pub __unk6: [::core::ffi::c_char; 32usize],
    pub extensionType: u8,
    pub error: i8,
    pub posValid: i8,
    pub format: u8,
    pub __bindgen_anon_1: KPADStatus__bindgen_ty_1,
    pub __unk8: [::core::ffi::c_char; 64usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union KPADStatus__bindgen_ty_1 {
    pub nunchuk: KPADStatus__bindgen_ty_1__bindgen_ty_1,
    pub classic: KPADStatus__bindgen_ty_1__bindgen_ty_2,
    pub pro: KPADStatus__bindgen_ty_1__bindgen_ty_3,
    pub __unk7: [::core::ffi::c_char; 80usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct KPADStatus__bindgen_ty_1__bindgen_ty_1 {
    pub stick: KPADVec2D,
    pub acc: KPADVec3D,
    pub accMagnitude: f32,
    pub accVariation: f32,
    pub hold: u32,
    pub trigger: u32,
    pub release: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct KPADStatus__bindgen_ty_1__bindgen_ty_2 {
    pub hold: u32,
    pub trigger: u32,
    pub release: u32,
    pub leftStick: KPADVec2D,
    pub rightStick: KPADVec2D,
    pub leftTrigger: f32,
    pub rightTrigger: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct KPADStatus__bindgen_ty_1__bindgen_ty_3 {
    pub hold: u32,
    pub trigger: u32,
    pub release: u32,
    pub leftStick: KPADVec2D,
    pub rightStick: KPADVec2D,
    pub charging: i32,
    pub wired: i32,
}
impl Default for KPADStatus__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for KPADStatus {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub mod VPADReadError {
    pub type Type = ::core::ffi::c_int;
    pub const VPAD_READ_SUCCESS: Type = 0;
    pub const VPAD_READ_NO_SAMPLES: Type = -1;
    pub const VPAD_READ_INVALID_CONTROLLER: Type = -2;
    pub const VPAD_READ_BUSY: Type = -4;
    pub const VPAD_READ_UNINITIALIZED: Type = -5;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct VPADVec2D {
    pub x: f32,
    pub y: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct VPADVec3D {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct VPADDirection {
    pub x: VPADVec3D,
    pub y: VPADVec3D,
    pub z: VPADVec3D,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct VPADTouchData {
    pub x: u16,
    pub y: u16,
    pub touched: u16,
    pub validity: u16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct VPADAccStatus {
    pub acc: VPADVec3D,
    pub magnitude: f32,
    pub variation: f32,
    pub vertical: VPADVec2D,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct VPADStatus {
    pub hold: u32,
    pub trigger: u32,
    pub release: u32,
    pub leftStick: VPADVec2D,
    pub rightStick: VPADVec2D,
    pub accelorometer: VPADAccStatus,
    pub gyro: VPADVec3D,
    pub angle: VPADVec3D,
    pub error: u8,
    pub __unk9: [::core::ffi::c_char; 1usize],
    pub tpNormal: VPADTouchData,
    pub tpFiltered1: VPADTouchData,
    pub tpFiltered2: VPADTouchData,
    pub __unk10: [::core::ffi::c_char; 2usize],
    pub direction: VPADDirection,
    pub usingHeadphones: BOOL,
    pub mag: VPADVec3D,
    pub slideVolume: u8,
    pub battery: u8,
    pub micStatus: u8,
    pub slideVolumeEx: u8,
    pub __unk11: [::core::ffi::c_char; 8usize],
}
pub type WUPSConfigButtons = u32;
pub mod WUPS_CONFIG_SIMPLE_INPUT {
    pub type Type = ::core::ffi::c_uint;
    pub const WUPS_CONFIG_BUTTON_NONE: Type = 0;
    pub const WUPS_CONFIG_BUTTON_LEFT: Type = 1;
    pub const WUPS_CONFIG_BUTTON_RIGHT: Type = 2;
    pub const WUPS_CONFIG_BUTTON_UP: Type = 4;
    pub const WUPS_CONFIG_BUTTON_DOWN: Type = 8;
    pub const WUPS_CONFIG_BUTTON_A: Type = 16;
    pub const WUPS_CONFIG_BUTTON_B: Type = 32;
    pub const WUPS_CONFIG_BUTTON_ZL: Type = 64;
    pub const WUPS_CONFIG_BUTTON_ZR: Type = 128;
    pub const WUPS_CONFIG_BUTTON_L: Type = 256;
    pub const WUPS_CONFIG_BUTTON_R: Type = 512;
    pub const WUPS_CONFIG_BUTTON_X: Type = 1024;
    pub const WUPS_CONFIG_BUTTON_Y: Type = 2048;
    pub const WUPS_CONFIG_BUTTON_STICK_L: Type = 4096;
    pub const WUPS_CONFIG_BUTTON_STICK_R: Type = 8192;
    pub const WUPS_CONFIG_BUTTON_PLUS: Type = 16384;
    pub const WUPS_CONFIG_BUTTON_MINUS: Type = 32768;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WUPSConfigSimplePadData {
    pub buttons_h: WUPS_CONFIG_SIMPLE_INPUT::Type,
    pub buttons_d: WUPS_CONFIG_SIMPLE_INPUT::Type,
    pub buttons_r: WUPS_CONFIG_SIMPLE_INPUT::Type,
    pub validPointer: bool,
    pub touched: bool,
    pub pointerAngle: f32,
    pub x: i32,
    pub y: i32,
}
impl Default for WUPSConfigSimplePadData {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WUPSConfigComplexPadData {
    pub vpad: WUPSConfigComplexPadData__bindgen_ty_1,
    pub kpad: WUPSConfigComplexPadData__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WUPSConfigComplexPadData__bindgen_ty_1 {
    pub vpadError: VPADReadError::Type,
    pub tpCalib: VPADTouchData,
    pub data: VPADStatus,
}
impl Default for WUPSConfigComplexPadData__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WUPSConfigComplexPadData__bindgen_ty_2 {
    pub kpadError: [KPADError::Type; 7usize],
    pub data: [KPADStatus; 7usize],
}
impl Default for WUPSConfigComplexPadData__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for WUPSConfigComplexPadData {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub mod WUPSConfigAPIStatus {
    pub type Type = ::core::ffi::c_int;
    pub const WUPSCONFIG_API_RESULT_SUCCESS: Type = 0;
    pub const WUPSCONFIG_API_RESULT_INVALID_ARGUMENT: Type = -1;
    pub const WUPSCONFIG_API_RESULT_OUT_OF_MEMORY: Type = -3;
    pub const WUPSCONFIG_API_RESULT_NOT_FOUND: Type = -6;
    pub const WUPSCONFIG_API_RESULT_INVALID_PLUGIN_IDENTIFIER: Type = -112;
    pub const WUPSCONFIG_API_RESULT_MISSING_CALLBACK: Type = -113;
    pub const WUPSCONFIG_API_RESULT_MODULE_NOT_FOUND: Type = -128;
    pub const WUPSCONFIG_API_RESULT_MODULE_MISSING_EXPORT: Type = -129;
    pub const WUPSCONFIG_API_RESULT_UNSUPPORTED_VERSION: Type = -130;
    pub const WUPSCONFIG_API_RESULT_UNSUPPORTED_COMMAND: Type = -131;
    pub const WUPSCONFIG_API_RESULT_LIB_UNINITIALIZED: Type = -132;
    pub const WUPSCONFIG_API_RESULT_UNKNOWN_ERROR: Type = -256;
}
pub mod WUPSConfigAPICallbackStatus {
    pub type Type = ::core::ffi::c_int;
    pub const WUPSCONFIG_API_CALLBACK_RESULT_SUCCESS: Type = 0;
    pub const WUPSCONFIG_API_CALLBACK_RESULT_ERROR: Type = -1;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct WUPSConfigAPIItemCallbacksV1 {
    pub getCurrentValueDisplay: ::core::option::Option<
        unsafe extern "C" fn(
            context: *mut ::core::ffi::c_void,
            out_buf: *mut ::core::ffi::c_char,
            out_size: i32,
        ) -> i32,
    >,
    pub getCurrentValueSelectedDisplay: ::core::option::Option<
        unsafe extern "C" fn(
            context: *mut ::core::ffi::c_void,
            out_buf: *mut ::core::ffi::c_char,
            out_size: i32,
        ) -> i32,
    >,
    pub onSelected: ::core::option::Option<
        unsafe extern "C" fn(context: *mut ::core::ffi::c_void, isSelected: bool),
    >,
    pub restoreDefault:
        ::core::option::Option<unsafe extern "C" fn(context: *mut ::core::ffi::c_void)>,
    pub isMovementAllowed:
        ::core::option::Option<unsafe extern "C" fn(context: *mut ::core::ffi::c_void) -> bool>,
    pub callCallback:
        ::core::option::Option<unsafe extern "C" fn(context: *mut ::core::ffi::c_void) -> bool>,
    pub onButtonPressed: ::core::option::Option<
        unsafe extern "C" fn(context: *mut ::core::ffi::c_void, button: WUPSConfigButtons),
    >,
    pub onDelete: ::core::option::Option<unsafe extern "C" fn(context: *mut ::core::ffi::c_void)>,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct WUPSConfigAPIItemCallbacksV2 {
    pub getCurrentValueDisplay: ::core::option::Option<
        unsafe extern "C" fn(
            context: *mut ::core::ffi::c_void,
            out_buf: *mut ::core::ffi::c_char,
            out_size: i32,
        ) -> i32,
    >,
    pub getCurrentValueSelectedDisplay: ::core::option::Option<
        unsafe extern "C" fn(
            context: *mut ::core::ffi::c_void,
            out_buf: *mut ::core::ffi::c_char,
            out_size: i32,
        ) -> i32,
    >,
    pub onSelected: ::core::option::Option<
        unsafe extern "C" fn(context: *mut ::core::ffi::c_void, isSelected: bool),
    >,
    pub restoreDefault:
        ::core::option::Option<unsafe extern "C" fn(context: *mut ::core::ffi::c_void)>,
    pub isMovementAllowed:
        ::core::option::Option<unsafe extern "C" fn(context: *mut ::core::ffi::c_void) -> bool>,
    pub onCloseCallback:
        ::core::option::Option<unsafe extern "C" fn(context: *mut ::core::ffi::c_void)>,
    pub onInput: ::core::option::Option<
        unsafe extern "C" fn(context: *mut ::core::ffi::c_void, input: WUPSConfigSimplePadData),
    >,
    pub onInputEx: ::core::option::Option<
        unsafe extern "C" fn(context: *mut ::core::ffi::c_void, input: WUPSConfigComplexPadData),
    >,
    pub onDelete: ::core::option::Option<unsafe extern "C" fn(context: *mut ::core::ffi::c_void)>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WUPSConfigAPIItemOptionsV1 {
    pub configId: *const ::core::ffi::c_char,
    pub displayName: *const ::core::ffi::c_char,
    pub context: *mut ::core::ffi::c_void,
    pub callbacks: WUPSConfigAPIItemCallbacksV1,
}
impl Default for WUPSConfigAPIItemOptionsV1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WUPSConfigAPIItemOptionsV2 {
    pub displayName: *const ::core::ffi::c_char,
    pub context: *mut ::core::ffi::c_void,
    pub callbacks: WUPSConfigAPIItemCallbacksV2,
}
impl Default for WUPSConfigAPIItemOptionsV2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WUPSConfigAPICreateItemOptions {
    pub version: u32,
    pub data: WUPSConfigAPICreateItemOptions__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union WUPSConfigAPICreateItemOptions__bindgen_ty_1 {
    pub v1: WUPSConfigAPIItemOptionsV1,
    pub v2: WUPSConfigAPIItemOptionsV2,
}
impl Default for WUPSConfigAPICreateItemOptions__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for WUPSConfigAPICreateItemOptions {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type WUPSConfigAPIVersion = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WUPSConfigItemHandle {
    pub handle: *mut ::core::ffi::c_void,
}
impl Default for WUPSConfigItemHandle {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WUPSConfigHandle {
    pub handle: *mut ::core::ffi::c_void,
}
impl Default for WUPSConfigHandle {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WUPSConfigCategoryHandle {
    pub handle: *mut ::core::ffi::c_void,
}
impl Default for WUPSConfigCategoryHandle {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WUPSConfigAPICreateCategoryOptionsV1 {
    pub name: *const ::core::ffi::c_char,
}
impl Default for WUPSConfigAPICreateCategoryOptionsV1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WUPSConfigAPICreateCategoryOptions {
    pub version: u32,
    pub data: WUPSConfigAPICreateCategoryOptions__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union WUPSConfigAPICreateCategoryOptions__bindgen_ty_1 {
    pub v1: WUPSConfigAPICreateCategoryOptionsV1,
}
impl Default for WUPSConfigAPICreateCategoryOptions__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for WUPSConfigAPICreateCategoryOptions {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WUPSConfigAPIOptionsV1 {
    pub name: *const ::core::ffi::c_char,
}
impl Default for WUPSConfigAPIOptionsV1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WUPSConfigAPIOptions {
    pub version: u32,
    pub data: WUPSConfigAPIOptions__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union WUPSConfigAPIOptions__bindgen_ty_1 {
    pub v1: WUPSConfigAPIOptionsV1,
}
impl Default for WUPSConfigAPIOptions__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for WUPSConfigAPIOptions {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wups_loader_init_config_args_t {
    pub arg_version: u32,
    pub plugin_identifier: u32,
}
pub type WUPSConfigAPI_MenuOpenedCallback = ::core::option::Option<
    unsafe extern "C" fn(root: WUPSConfigCategoryHandle) -> WUPSConfigAPICallbackStatus::Type,
>;
pub type WUPSConfigAPI_MenuClosedCallback = ::core::option::Option<unsafe extern "C" fn()>;
pub mod WUPSStorageError {
    pub type Type = ::core::ffi::c_int;
    pub const WUPS_STORAGE_ERROR_SUCCESS: Type = 0;
    pub const WUPS_STORAGE_ERROR_INVALID_ARGS: Type = -1;
    pub const WUPS_STORAGE_ERROR_MALLOC_FAILED: Type = -2;
    pub const WUPS_STORAGE_ERROR_UNEXPECTED_DATA_TYPE: Type = -3;
    pub const WUPS_STORAGE_ERROR_BUFFER_TOO_SMALL: Type = -4;
    pub const WUPS_STORAGE_ERROR_ALREADY_EXISTS: Type = -5;
    pub const WUPS_STORAGE_ERROR_IO_ERROR: Type = -6;
    pub const WUPS_STORAGE_ERROR_NOT_FOUND: Type = -16;
    pub const WUPS_STORAGE_ERROR_INTERNAL_NOT_INITIALIZED: Type = -240;
    pub const WUPS_STORAGE_ERROR_INTERNAL_INVALID_VERSION: Type = -241;
    pub const WUPS_STORAGE_ERROR_UNKNOWN_ERROR: Type = -256;
}
pub mod WUPSStorageItemTypes {
    pub type Type = ::core::ffi::c_uint;
    pub const WUPS_STORAGE_ITEM_S32: Type = 0;
    pub const WUPS_STORAGE_ITEM_S64: Type = 1;
    pub const WUPS_STORAGE_ITEM_U32: Type = 2;
    pub const WUPS_STORAGE_ITEM_U64: Type = 3;
    pub const WUPS_STORAGE_ITEM_STRING: Type = 4;
    pub const WUPS_STORAGE_ITEM_BINARY: Type = 5;
    pub const WUPS_STORAGE_ITEM_BOOL: Type = 6;
    pub const WUPS_STORAGE_ITEM_FLOAT: Type = 7;
    pub const WUPS_STORAGE_ITEM_DOUBLE: Type = 8;
}
pub type WUPSStorageItemType = u32;
pub type wups_storage_root_item = *mut ::core::ffi::c_void;
pub type wups_storage_item = *mut ::core::ffi::c_void;
pub type WUPSStorage_SaveFunction = ::core::option::Option<
    unsafe extern "C" fn(root: wups_storage_root_item, force: bool) -> WUPSStorageError::Type,
>;
pub type WUPSStorage_ForceReloadFunction = ::core::option::Option<
    unsafe extern "C" fn(root: wups_storage_root_item) -> WUPSStorageError::Type,
>;
pub type WUPSStorage_WipeStorageFunction = ::core::option::Option<
    unsafe extern "C" fn(root: wups_storage_root_item) -> WUPSStorageError::Type,
>;
pub type WUPSStorage_DeleteItemFunction = ::core::option::Option<
    unsafe extern "C" fn(
        root: wups_storage_root_item,
        parent: wups_storage_item,
        key: *const ::core::ffi::c_char,
    ) -> WUPSStorageError::Type,
>;
pub type WUPSStorage_CreateSubItemFunction = ::core::option::Option<
    unsafe extern "C" fn(
        root: wups_storage_root_item,
        parent: wups_storage_item,
        key: *const ::core::ffi::c_char,
        outItem: *mut wups_storage_item,
    ) -> WUPSStorageError::Type,
>;
pub type WUPSStorage_GetSubItemFunction = ::core::option::Option<
    unsafe extern "C" fn(
        root: wups_storage_root_item,
        parent: wups_storage_item,
        key: *const ::core::ffi::c_char,
        outItem: *mut wups_storage_item,
    ) -> WUPSStorageError::Type,
>;
pub type WUPSStorage_StoreItemFunction = ::core::option::Option<
    unsafe extern "C" fn(
        root: wups_storage_root_item,
        parent: wups_storage_item,
        key: *const ::core::ffi::c_char,
        itemType: WUPSStorageItemType,
        data: *mut ::core::ffi::c_void,
        length: u32,
    ) -> WUPSStorageError::Type,
>;
pub type WUPSStorage_GetItemFunction = ::core::option::Option<
    unsafe extern "C" fn(
        root: wups_storage_root_item,
        parent: wups_storage_item,
        key: *const ::core::ffi::c_char,
        itemType: WUPSStorageItemType,
        data: *mut ::core::ffi::c_void,
        maxSize: u32,
        outSize: *mut u32,
    ) -> WUPSStorageError::Type,
>;
pub type WUPSStorage_GetItemSizeFunction = ::core::option::Option<
    unsafe extern "C" fn(
        root: wups_storage_root_item,
        parent: wups_storage_item,
        key: *const ::core::ffi::c_char,
        itemType: WUPSStorageItemType,
        outSize: *mut u32,
    ) -> WUPSStorageError::Type,
>;
pub type WUPS_STORAGE_API_VERSION = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wups_loader_init_storage_args_t_ {
    pub version: WUPS_STORAGE_API_VERSION,
    pub root_item: wups_storage_root_item,
    pub save_function_ptr: WUPSStorage_SaveFunction,
    pub force_reload_function_ptr: WUPSStorage_ForceReloadFunction,
    pub wipe_storage_function_ptr: WUPSStorage_WipeStorageFunction,
    pub delete_item_function_ptr: WUPSStorage_DeleteItemFunction,
    pub create_sub_item_function_ptr: WUPSStorage_CreateSubItemFunction,
    pub get_sub_item_function_ptr: WUPSStorage_GetSubItemFunction,
    pub store_item_function_ptr: WUPSStorage_StoreItemFunction,
    pub get_item_function_ptr: WUPSStorage_GetItemFunction,
    pub get_item_size_function_ptr: WUPSStorage_GetItemSizeFunction,
}
impl Default for wups_loader_init_storage_args_t_ {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type wups_loader_init_storage_args_t = wups_loader_init_storage_args_t_;
pub mod wups_loader_library_type_t {
    pub type Type = ::core::ffi::c_uint;
    pub const WUPS_LOADER_LIBRARY_AVM: Type = 0;
    pub const WUPS_LOADER_LIBRARY_CAMERA: Type = 1;
    pub const WUPS_LOADER_LIBRARY_COREINIT: Type = 2;
    pub const WUPS_LOADER_LIBRARY_DC: Type = 3;
    pub const WUPS_LOADER_LIBRARY_DMAE: Type = 4;
    pub const WUPS_LOADER_LIBRARY_DRMAPP: Type = 5;
    pub const WUPS_LOADER_LIBRARY_ERREULA: Type = 6;
    pub const WUPS_LOADER_LIBRARY_GX2: Type = 7;
    pub const WUPS_LOADER_LIBRARY_H264: Type = 8;
    pub const WUPS_LOADER_LIBRARY_LZMA920: Type = 9;
    pub const WUPS_LOADER_LIBRARY_MIC: Type = 10;
    pub const WUPS_LOADER_LIBRARY_NFC: Type = 11;
    pub const WUPS_LOADER_LIBRARY_NIO_PROF: Type = 12;
    pub const WUPS_LOADER_LIBRARY_NLIBCURL: Type = 13;
    pub const WUPS_LOADER_LIBRARY_NLIBNSS: Type = 14;
    pub const WUPS_LOADER_LIBRARY_NLIBNSS2: Type = 15;
    pub const WUPS_LOADER_LIBRARY_NN_AC: Type = 16;
    pub const WUPS_LOADER_LIBRARY_NN_ACP: Type = 17;
    pub const WUPS_LOADER_LIBRARY_NN_ACT: Type = 18;
    pub const WUPS_LOADER_LIBRARY_NN_AOC: Type = 19;
    pub const WUPS_LOADER_LIBRARY_NN_BOSS: Type = 20;
    pub const WUPS_LOADER_LIBRARY_NN_CCR: Type = 21;
    pub const WUPS_LOADER_LIBRARY_NN_CMPT: Type = 22;
    pub const WUPS_LOADER_LIBRARY_NN_DLP: Type = 23;
    pub const WUPS_LOADER_LIBRARY_NN_EC: Type = 24;
    pub const WUPS_LOADER_LIBRARY_NN_FP: Type = 25;
    pub const WUPS_LOADER_LIBRARY_NN_HAI: Type = 26;
    pub const WUPS_LOADER_LIBRARY_NN_HPAD: Type = 27;
    pub const WUPS_LOADER_LIBRARY_NN_IDBE: Type = 28;
    pub const WUPS_LOADER_LIBRARY_NN_NDM: Type = 29;
    pub const WUPS_LOADER_LIBRARY_NN_NETS2: Type = 30;
    pub const WUPS_LOADER_LIBRARY_NN_NFP: Type = 31;
    pub const WUPS_LOADER_LIBRARY_NN_NIM: Type = 32;
    pub const WUPS_LOADER_LIBRARY_NN_OLV: Type = 33;
    pub const WUPS_LOADER_LIBRARY_NN_PDM: Type = 34;
    pub const WUPS_LOADER_LIBRARY_NN_SAVE: Type = 35;
    pub const WUPS_LOADER_LIBRARY_NN_SL: Type = 36;
    pub const WUPS_LOADER_LIBRARY_NN_SPM: Type = 37;
    pub const WUPS_LOADER_LIBRARY_NN_TEMP: Type = 38;
    pub const WUPS_LOADER_LIBRARY_NN_UDS: Type = 39;
    pub const WUPS_LOADER_LIBRARY_NN_VCTL: Type = 40;
    pub const WUPS_LOADER_LIBRARY_NSYSCCR: Type = 41;
    pub const WUPS_LOADER_LIBRARY_NSYSHID: Type = 42;
    pub const WUPS_LOADER_LIBRARY_NSYSKBD: Type = 43;
    pub const WUPS_LOADER_LIBRARY_NSYSNET: Type = 44;
    pub const WUPS_LOADER_LIBRARY_NSYSUHS: Type = 45;
    pub const WUPS_LOADER_LIBRARY_NSYSUVD: Type = 46;
    pub const WUPS_LOADER_LIBRARY_NTAG: Type = 47;
    pub const WUPS_LOADER_LIBRARY_PADSCORE: Type = 48;
    pub const WUPS_LOADER_LIBRARY_PROC_UI: Type = 49;
    pub const WUPS_LOADER_LIBRARY_SND_CORE: Type = 50;
    pub const WUPS_LOADER_LIBRARY_SND_USER: Type = 51;
    pub const WUPS_LOADER_LIBRARY_SNDCORE2: Type = 52;
    pub const WUPS_LOADER_LIBRARY_SNDUSER2: Type = 53;
    pub const WUPS_LOADER_LIBRARY_SWKBD: Type = 54;
    pub const WUPS_LOADER_LIBRARY_SYSAPP: Type = 55;
    pub const WUPS_LOADER_LIBRARY_TCL: Type = 56;
    pub const WUPS_LOADER_LIBRARY_TVE: Type = 57;
    pub const WUPS_LOADER_LIBRARY_UAC: Type = 58;
    pub const WUPS_LOADER_LIBRARY_UAC_RPL: Type = 59;
    pub const WUPS_LOADER_LIBRARY_USB_MIC: Type = 60;
    pub const WUPS_LOADER_LIBRARY_UVC: Type = 61;
    pub const WUPS_LOADER_LIBRARY_UVD: Type = 62;
    pub const WUPS_LOADER_LIBRARY_VPAD: Type = 63;
    pub const WUPS_LOADER_LIBRARY_VPADBASE: Type = 64;
    pub const WUPS_LOADER_LIBRARY_ZLIB125: Type = 65;
    pub const WUPS_LOADER_LIBRARY_OTHER: Type = 66;
}
pub mod wups_loader_entry_type_t {
    pub type Type = ::core::ffi::c_uint;
    pub const WUPS_LOADER_ENTRY_FUNCTION: Type = 0;
    pub const WUPS_LOADER_ENTRY_FUNCTION_MANDATORY: Type = 1;
    pub const WUPS_LOADER_ENTRY_EXPORT: Type = 2;
}
pub mod WUPSFPTargetProcess {
    pub type Type = ::core::ffi::c_uint;
    pub const WUPS_FP_TARGET_PROCESS_ALL: Type = 255;
    pub const WUPS_FP_TARGET_PROCESS_ROOT_RPX: Type = 1;
    pub const WUPS_FP_TARGET_PROCESS_WII_U_MENU: Type = 2;
    pub const WUPS_FP_TARGET_PROCESS_TVII: Type = 3;
    pub const WUPS_FP_TARGET_PROCESS_E_MANUAL: Type = 4;
    pub const WUPS_FP_TARGET_PROCESS_HOME_MENU: Type = 5;
    pub const WUPS_FP_TARGET_PROCESS_ERROR_DISPLAY: Type = 6;
    pub const WUPS_FP_TARGET_PROCESS_MINI_MIIVERSE: Type = 7;
    pub const WUPS_FP_TARGET_PROCESS_BROWSER: Type = 8;
    pub const WUPS_FP_TARGET_PROCESS_MIIVERSE: Type = 9;
    pub const WUPS_FP_TARGET_PROCESS_ESHOP: Type = 10;
    pub const WUPS_FP_TARGET_PROCESS_PFID_11: Type = 11;
    pub const WUPS_FP_TARGET_PROCESS_DOWNLOAD_MANAGER: Type = 12;
    pub const WUPS_FP_TARGET_PROCESS_PFID_13: Type = 13;
    pub const WUPS_FP_TARGET_PROCESS_PFID_14: Type = 14;
    pub const WUPS_FP_TARGET_PROCESS_GAME: Type = 15;
    pub const WUPS_FP_TARGET_PROCESS_GAME_AND_MENU: Type = 16;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wups_loader_entry_t {
    pub type_: wups_loader_entry_type_t::Type,
    pub _function: wups_loader_entry_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wups_loader_entry_t__bindgen_ty_1 {
    pub physical_address: *const ::core::ffi::c_void,
    pub virtual_address: *const ::core::ffi::c_void,
    pub name: *const ::core::ffi::c_char,
    pub library: wups_loader_library_type_t::Type,
    pub my_function_name: *const ::core::ffi::c_char,
    pub target: *const ::core::ffi::c_void,
    pub call_addr: *const ::core::ffi::c_void,
    pub targetProcess: WUPSFPTargetProcess::Type,
}
impl Default for wups_loader_entry_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for wups_loader_entry_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConfigItemMultipleValuesPair {
    pub value: u32,
    pub valueName: *const ::core::ffi::c_char,
}
impl Default for ConfigItemMultipleValuesPair {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConfigItemMultipleValues {
    pub handle: WUPSConfigItemHandle,
    pub identifier: *const ::core::ffi::c_char,
    pub defaultValueIndex: i32,
    pub valueIndex: i32,
    pub valueIndexAtCreation: i32,
    pub values: *mut ConfigItemMultipleValuesPair,
    pub valueCount: ::core::ffi::c_int,
    pub valueChangedCallback: *mut ::core::ffi::c_void,
}
impl Default for ConfigItemMultipleValues {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type MultipleValuesChangedCallback =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut ConfigItemMultipleValues, arg2: u32)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConfigItemBoolean {
    pub handle: WUPSConfigItemHandle,
    pub identifier: *const ::core::ffi::c_char,
    pub defaultValue: bool,
    pub valueAtCreation: bool,
    pub value: bool,
    pub trueValue: [::core::ffi::c_char; 32usize],
    pub falseValue: [::core::ffi::c_char; 32usize],
    pub valueChangedCallback: *mut ::core::ffi::c_void,
}
impl Default for ConfigItemBoolean {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type BooleanValueChangedCallback =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut ConfigItemBoolean, arg2: bool)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConfigItemStub {
    pub handle: WUPSConfigItemHandle,
}
impl Default for ConfigItemStub {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConfigItemIntegerRange {
    pub handle: WUPSConfigItemHandle,
    pub identifier: *const ::core::ffi::c_char,
    pub defaultValue: ::core::ffi::c_int,
    pub value: ::core::ffi::c_int,
    pub valueAtCreation: ::core::ffi::c_int,
    pub minValue: ::core::ffi::c_int,
    pub maxValue: ::core::ffi::c_int,
    pub valueChangedCallback: *mut ::core::ffi::c_void,
}
impl Default for ConfigItemIntegerRange {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IntegerRangeValueChangedCallback =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut ConfigItemIntegerRange, arg2: i32)>;
extern "C" {
    pub fn wut_get_thread_specific(id: ::core::ffi::c_int) -> u32;
    pub static wups_meta_info_linking_order: [::core::ffi::c_char; 0usize];
    pub fn OSFatal(msg: *const ::core::ffi::c_char);
    pub fn WUPSConfigAPI_InitEx(
        pluginIdentifier: u32,
        arg1: WUPSConfigAPIOptions,
        arg2: WUPSConfigAPI_MenuOpenedCallback,
        arg3: WUPSConfigAPI_MenuClosedCallback,
    ) -> WUPSConfigAPIStatus::Type;
    pub fn WUPSConfigAPI_Init(
        optionsV1: WUPSConfigAPIOptionsV1,
        openedCallback: WUPSConfigAPI_MenuOpenedCallback,
        closedCallback: WUPSConfigAPI_MenuClosedCallback,
    ) -> WUPSConfigAPIStatus::Type;
    pub fn WUPSConfigAPI_GetVersion(
        outVariable: *mut WUPSConfigAPIVersion,
    ) -> WUPSConfigAPIStatus::Type;
    pub fn WUPSConfigAPI_Category_CreateEx(
        options: WUPSConfigAPICreateCategoryOptions,
        out: *mut WUPSConfigCategoryHandle,
    ) -> WUPSConfigAPIStatus::Type;
    pub fn WUPSConfigAPI_Category_Destroy(
        handle: WUPSConfigCategoryHandle,
    ) -> WUPSConfigAPIStatus::Type;
    pub fn WUPSConfigAPI_Category_AddCategory(
        parentHandle: WUPSConfigCategoryHandle,
        categoryHandle: WUPSConfigCategoryHandle,
    ) -> WUPSConfigAPIStatus::Type;
    pub fn WUPSConfigAPI_Category_AddItem(
        parentHandle: WUPSConfigCategoryHandle,
        itemHandle: WUPSConfigItemHandle,
    ) -> WUPSConfigAPIStatus::Type;
    pub fn WUPSConfigAPI_Item_CreateEx(
        options: WUPSConfigAPICreateItemOptions,
        out: *mut WUPSConfigItemHandle,
    ) -> WUPSConfigAPIStatus::Type;
    pub fn WUPSConfigAPI_Item_Destroy(handle: WUPSConfigItemHandle) -> WUPSConfigAPIStatus::Type;
    pub fn WUPSConfigAPI_GetStatusStr(
        status: WUPSConfigAPIStatus::Type,
    ) -> *const ::core::ffi::c_char;
    pub fn WUPSStorageAPI_InitInternal(
        args: wups_loader_init_storage_args_t,
    ) -> WUPSStorageError::Type;
    pub fn WUPSStorageAPI_GetStatusStr(
        status: WUPSStorageError::Type,
    ) -> *const ::core::ffi::c_char;
    pub fn WUPSStorageAPI_SaveStorage(forceSave: bool) -> WUPSStorageError::Type;
    pub fn WUPSStorageAPI_ForceReloadStorage() -> WUPSStorageError::Type;
    pub fn WUPSStorageAPI_WipeStorage() -> WUPSStorageError::Type;
    pub fn WUPSStorageAPI_DeleteItem(
        parent: wups_storage_item,
        key: *const ::core::ffi::c_char,
    ) -> WUPSStorageError::Type;
    pub fn WUPSStorageAPI_CreateSubItem(
        parent: wups_storage_item,
        key: *const ::core::ffi::c_char,
        outItem: *mut wups_storage_item,
    ) -> WUPSStorageError::Type;
    pub fn WUPSStorageAPI_GetSubItem(
        parent: wups_storage_item,
        key: *const ::core::ffi::c_char,
        outItem: *mut wups_storage_item,
    ) -> WUPSStorageError::Type;
    pub fn WUPSStorageAPI_StoreItem(
        parent: wups_storage_item,
        key: *const ::core::ffi::c_char,
        type_: WUPSStorageItemType,
        data: *mut ::core::ffi::c_void,
        size: u32,
    ) -> WUPSStorageError::Type;
    pub fn WUPSStorageAPI_GetItem(
        parent: wups_storage_item,
        key: *const ::core::ffi::c_char,
        type_: WUPSStorageItemType,
        data: *mut ::core::ffi::c_void,
        maxSize: u32,
        outSize: *mut u32,
    ) -> WUPSStorageError::Type;
    pub fn WUPSStorageAPI_GetItemSize(
        parent: wups_storage_item,
        key: *const ::core::ffi::c_char,
        itemType: WUPSStorageItemType,
        outSize: *mut u32,
    ) -> WUPSStorageError::Type;
    pub fn WUPSConfigItemMultipleValues_Create(
        identifier: *const ::core::ffi::c_char,
        displayName: *const ::core::ffi::c_char,
        defaultValueIndex: ::core::ffi::c_int,
        currentValueIndex: ::core::ffi::c_int,
        possibleValues: *mut ConfigItemMultipleValuesPair,
        pairCount: ::core::ffi::c_int,
        callback: MultipleValuesChangedCallback,
        outHandle: *mut WUPSConfigItemHandle,
    ) -> WUPSConfigAPIStatus::Type;
    pub fn WUPSConfigItemMultipleValues_AddToCategory(
        cat: WUPSConfigCategoryHandle,
        identifier: *const ::core::ffi::c_char,
        displayName: *const ::core::ffi::c_char,
        defaultValueIndex: ::core::ffi::c_int,
        currentValueIndex: ::core::ffi::c_int,
        possibleValues: *mut ConfigItemMultipleValuesPair,
        pairCount: ::core::ffi::c_int,
        callback: MultipleValuesChangedCallback,
    ) -> WUPSConfigAPIStatus::Type;
    pub fn WUPSConfigItemBoolean_CreateEx(
        identifier: *const ::core::ffi::c_char,
        displayName: *const ::core::ffi::c_char,
        defaultValue: bool,
        currentValue: bool,
        callback: BooleanValueChangedCallback,
        trueValue: *const ::core::ffi::c_char,
        falseValue: *const ::core::ffi::c_char,
        outHandle: *mut WUPSConfigItemHandle,
    ) -> WUPSConfigAPIStatus::Type;
    pub fn WUPSConfigItemBoolean_AddToCategory(
        cat: WUPSConfigCategoryHandle,
        identifier: *const ::core::ffi::c_char,
        displayName: *const ::core::ffi::c_char,
        defaultValue: bool,
        currentValue: bool,
        callback: BooleanValueChangedCallback,
    ) -> WUPSConfigAPIStatus::Type;
    pub fn WUPSConfigItemBoolean_AddToCategoryEx(
        cat: WUPSConfigCategoryHandle,
        identifier: *const ::core::ffi::c_char,
        displayName: *const ::core::ffi::c_char,
        defaultValue: bool,
        currentValue: bool,
        callback: BooleanValueChangedCallback,
        trueValue: *const ::core::ffi::c_char,
        falseValue: *const ::core::ffi::c_char,
    ) -> WUPSConfigAPIStatus::Type;
    pub fn WUPSConfigItemStub_Create(
        displayName: *const ::core::ffi::c_char,
        outHandle: *mut WUPSConfigItemHandle,
    ) -> WUPSConfigAPIStatus::Type;
    pub fn WUPSConfigItemStub_AddToCategory(
        cat: WUPSConfigCategoryHandle,
        displayName: *const ::core::ffi::c_char,
    ) -> WUPSConfigAPIStatus::Type;
    pub fn WUPSConfigItemIntegerRange_Create(
        identifier: *const ::core::ffi::c_char,
        displayName: *const ::core::ffi::c_char,
        defaultValue: i32,
        currentValue: i32,
        minValue: i32,
        maxValue: i32,
        callback: IntegerRangeValueChangedCallback,
        outHandle: *mut WUPSConfigItemHandle,
    ) -> WUPSConfigAPIStatus::Type;
    pub fn WUPSConfigItemIntegerRange_AddToCategory(
        cat: WUPSConfigCategoryHandle,
        identifier: *const ::core::ffi::c_char,
        displayName: *const ::core::ffi::c_char,
        defaultValue: i32,
        currentValue: i32,
        minValue: i32,
        maxValue: i32,
        callback: IntegerRangeValueChangedCallback,
    ) -> WUPSConfigAPIStatus::Type;
}
